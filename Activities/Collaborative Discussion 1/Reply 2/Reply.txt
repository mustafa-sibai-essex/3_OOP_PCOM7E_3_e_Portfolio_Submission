Hi Aaron,

You raise some interesting points. I agree with ADP, RA, DP, and DIP being a template for future software development since these can be a solid foundation for building software. Algorithms should be reused in accordance with software requirements. I have reused many common systems from one project in another. Systems such as registation and authentication are widespread, and once you properly develop them, they can be reused over and over with a few minor modifications. I have saved months of development work by reusing many of these common modules. It also increased my profit margins and reduced the cost of developing software for clients.

I discovered that reusing the user interface becomes more tricky than backend server code since not every client wants the same user interface for their software. Some want to be unique in presenting their software to their customers. However, it is not impossible to reuse some user interface elements if done correctly. I've found out splitting user interface elements into smaller modular components makes reusing them much easier, especially in frameworks that take advantage of such design patterns such as React and React Native frameworks.